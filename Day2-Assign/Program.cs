using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assign_2
{
    class Program
    {
        static void Main(string[] args)
        {
            Employee e1 = new Manager("shubham", 11, 111, "software Engg");
            Employee e2 = new GeneralManager("naik", 11, 4000, "SE", "Manager");
            Employee e3 = new CEO("John", 1000, 12);

            Console.WriteLine(e3.CalacNetSalary());
            Console.WriteLine(e2.CalacNetSalary());
            Console.WriteLine(e1.CalacNetSalary());

            Console.WriteLine(e1.Empno);
            Console.WriteLine(e2.Empno);
            Console.WriteLine(e3.Empno);
            Console.ReadLine();


        }
    }




    public abstract class Employee {

        //First Property name
        private string name;
        public string Name {

            set 
            {
                if (value != null) {
                    name = value;
                }else
                {
                    Console.WriteLine("Name does not be Null");
                }
            }
            get
            {
                return name;

            }
        
        
        }


        //secound property int EmpNo -> readonly, autogenerated

        private static int empnoc;
        private int empno;
        public int Empno {

            get//read only prop
            {
                return empno;
            
            }
        }


        //Third prop short DeptNo -> > 0

        private short deptNo;
        private short DeptNo {

            set//write only property
            {
                if (value > 0)
                {
                    deptNo = value;
                }
                else
                {
                    Console.WriteLine("Invalid DeptNo");
                }
            
            }

            get
            {
                return deptNo;
            
            }
        }


        //Third prop abstract decimal Basic 

        private decimal basic;
        public abstract decimal Basic
        {
            get;
            set;
        }

        public abstract decimal CalacNetSalary();


        public Employee(string name = null, decimal basic = 0, short deptNo = 0)
        {
            empnoc++;
            empno = empnoc;
            this.Name = name;
            this.Basic = basic;
            this.DeptNo = deptNo;

        }


    }


    class Manager : Employee
    {






        //First prop string Designation -> cant be blank
        private string designation;
        public string Designation
        {
            set 
            {
                if (value != null)
                {

                    designation = value;
                }
                else
                {
                    Console.WriteLine("Not Valid");
                }
            }
            get
            {
                return designation;
            }
        
        }

        private decimal basic;
        public override decimal Basic
        {
            get
            {

                return basic;
            }
            set
            {

                basic = value;
            }
        }

        public override decimal CalacNetSalary()
        {
            Console.WriteLine("This is Manager net salary method");
            return 10000;
        }


        public Manager(string name = null, decimal basic = 0, short deptNo = 0, string designation = null) : base(name, basic, deptNo)
        {
            this.Designation = designation;
        }



    }


    class GeneralManager : Manager

    {
        public GeneralManager(string name = null, decimal basic = 0, short deptNo = 0, string designation = null, string perks = null) : base(name, basic, deptNo, designation)
        {

        }

        //string Perks -> no validations
        private string perks;
        public string Perks 
        {
            set
            {
                perks = value;
            }
            get 
            {
                return perks;
            }
        
        }

     

        public override decimal CalacNetSalary()
        {
            Console.WriteLine("This is GeneralManager net salary method");
            return 555555;
        }
    }


    class CEO : Employee
    {
        public CEO(string name = null, decimal basic = 0, short deptNo = 0) : base(name, basic, deptNo)
        {

        }
        private decimal basic;
        public override decimal Basic
        {
            get
            {

                return basic;
            }
            set
            {

                basic = value;
            }
        }

        public override sealed  decimal CalacNetSalary()
        {
            Console.WriteLine("This is CEO net salary method");
            return 9999999;
        }
    }

























}
